// Generated by gencpp from file mavros_msgs/PolyWaypoint.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_POLYWAYPOINT_H
#define MAVROS_MSGS_MESSAGE_POLYWAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct PolyWaypoint_
{
  typedef PolyWaypoint_<ContainerAllocator> Type;

  PolyWaypoint_()
    : id(0)
    , timeto(0.0)
    , x_lat(0.0)
    , y_long(0.0)
    , z_alt(0.0)
    , yaw(0.0)
    , x_vel(0.0)
    , y_vel(0.0)
    , z_vel(0.0)
    , yaw_vel(0.0)
    , x_acc(0.0)
    , y_acc(0.0)
    , z_acc(0.0)
    , yaw_acc(0.0)  {
    }
  PolyWaypoint_(const ContainerAllocator& _alloc)
    : id(0)
    , timeto(0.0)
    , x_lat(0.0)
    , y_long(0.0)
    , z_alt(0.0)
    , yaw(0.0)
    , x_vel(0.0)
    , y_vel(0.0)
    , z_vel(0.0)
    , yaw_vel(0.0)
    , x_acc(0.0)
    , y_acc(0.0)
    , z_acc(0.0)
    , yaw_acc(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _id_type;
  _id_type id;

   typedef float _timeto_type;
  _timeto_type timeto;

   typedef double _x_lat_type;
  _x_lat_type x_lat;

   typedef double _y_long_type;
  _y_long_type y_long;

   typedef double _z_alt_type;
  _z_alt_type z_alt;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _x_vel_type;
  _x_vel_type x_vel;

   typedef double _y_vel_type;
  _y_vel_type y_vel;

   typedef double _z_vel_type;
  _z_vel_type z_vel;

   typedef double _yaw_vel_type;
  _yaw_vel_type yaw_vel;

   typedef double _x_acc_type;
  _x_acc_type x_acc;

   typedef double _y_acc_type;
  _y_acc_type y_acc;

   typedef double _z_acc_type;
  _z_acc_type z_acc;

   typedef double _yaw_acc_type;
  _yaw_acc_type yaw_acc;





  typedef boost::shared_ptr< ::mavros_msgs::PolyWaypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::PolyWaypoint_<ContainerAllocator> const> ConstPtr;

}; // struct PolyWaypoint_

typedef ::mavros_msgs::PolyWaypoint_<std::allocator<void> > PolyWaypoint;

typedef boost::shared_ptr< ::mavros_msgs::PolyWaypoint > PolyWaypointPtr;
typedef boost::shared_ptr< ::mavros_msgs::PolyWaypoint const> PolyWaypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::PolyWaypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::PolyWaypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geographic_msgs': ['/opt/ros/melodic/share/geographic_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'mavros_msgs': ['/home/lbf10/ardupilot_ws/src/mavros/mavros_msgs/msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'uuid_msgs': ['/opt/ros/melodic/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::PolyWaypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::PolyWaypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::PolyWaypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::PolyWaypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::PolyWaypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::PolyWaypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::PolyWaypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "12363dc62202ef5df24a52908e420297";
  }

  static const char* value(const ::mavros_msgs::PolyWaypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x12363dc62202ef5dULL;
  static const uint64_t static_value2 = 0xf24a52908e420297ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::PolyWaypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/PolyWaypoint";
  }

  static const char* value(const ::mavros_msgs::PolyWaypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::PolyWaypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# PolyWaypoint.msg\n"
"#\n"
"# Representation of a waypoint according to a 5th order polynomial\n"
"# Contains 3D position and yaw orientation, as well as their first and second derivatives\n"
"\n"
"uint16  id      #           ID of the waypoint in relation to previous configured ones. \n"
"                #           id = 0 means inserting this waypoint in the beginning\n"
"                #           id = NaN means inserting this waypoint at the end\n"
"                #           id = 3 means inserting this waypoint in position 2 and shifting all others after 2\n"
"\n"
"float32 timeto  # [s]       time to get to the waypoint\n"
"float64 x_lat   # [m]       position in x relative to the home position\n"
"float64 y_long  # [m]       position in y relative to the home position\n"
"float64 z_alt   # [m]       position in z relative to the home position\n"
"float64 yaw     # [rad]     yaw position relative to x \n"
"float64 x_vel   # [m/s]     velocity in x\n"
"float64 y_vel   # [m/s]     velocity in y\n"
"float64 z_vel   # [m/s]     velocity in z\n"
"float64 yaw_vel # [rad/s]   velocity in yaw (around z axis)\n"
"float64 x_acc   # [m/s^2]   acceleration in x\n"
"float64 y_acc   # [m/s^2]   acceleration in y\n"
"float64 z_acc   # [m/s^2]   acceleration in z\n"
"float64 yaw_acc # [rad/s^2] acceleration in yaw (around z axis)\n"
;
  }

  static const char* value(const ::mavros_msgs::PolyWaypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::PolyWaypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.timeto);
      stream.next(m.x_lat);
      stream.next(m.y_long);
      stream.next(m.z_alt);
      stream.next(m.yaw);
      stream.next(m.x_vel);
      stream.next(m.y_vel);
      stream.next(m.z_vel);
      stream.next(m.yaw_vel);
      stream.next(m.x_acc);
      stream.next(m.y_acc);
      stream.next(m.z_acc);
      stream.next(m.yaw_acc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PolyWaypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::PolyWaypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::PolyWaypoint_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "timeto: ";
    Printer<float>::stream(s, indent + "  ", v.timeto);
    s << indent << "x_lat: ";
    Printer<double>::stream(s, indent + "  ", v.x_lat);
    s << indent << "y_long: ";
    Printer<double>::stream(s, indent + "  ", v.y_long);
    s << indent << "z_alt: ";
    Printer<double>::stream(s, indent + "  ", v.z_alt);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "x_vel: ";
    Printer<double>::stream(s, indent + "  ", v.x_vel);
    s << indent << "y_vel: ";
    Printer<double>::stream(s, indent + "  ", v.y_vel);
    s << indent << "z_vel: ";
    Printer<double>::stream(s, indent + "  ", v.z_vel);
    s << indent << "yaw_vel: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_vel);
    s << indent << "x_acc: ";
    Printer<double>::stream(s, indent + "  ", v.x_acc);
    s << indent << "y_acc: ";
    Printer<double>::stream(s, indent + "  ", v.y_acc);
    s << indent << "z_acc: ";
    Printer<double>::stream(s, indent + "  ", v.z_acc);
    s << indent << "yaw_acc: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_acc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_POLYWAYPOINT_H
